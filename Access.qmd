---
title: "OBJECTIF 3 : Accessibilité avec R et Open Street Map"
subtitle: "AFROMPA'R Bouaké 2025"
author: "Claude Grasland & Bamba Vakaramoko"
date: "2025-03-28"
date-format: iso
lang: fr
format:
  html:
    embed-resources: true
    smooth-scroll: true
    fontsize: 0.9em
    toc: true
    toc-depth: 3
    toc-title: "."
    crossrefs-hover: false
    css: custom.css
    theme: [yeti, style.scss]
    code-fold: true
execute:
  warning: false
  message: false 
knitr:
  opts_chunk:
    out.width: "100%"
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 72
---



```{r setup, include=FALSE}

# packages utilitaires
library(knitr)
library(dplyr)
library(reshape2)

# packages cartographiques
library(sf)
library(mapsf)
#library(leaflet)

# packages de calcul des distances

# Installer la version de développement 
#library(remotes)
#remotes::install_github('riatelab/osrm')
library(osrm)
```


Reprenant un cours dispensé lors de l'école d'été CIST 2023 au Bénin par C. Grasland et B. Vakaramoko et intitulé [Distance et accessibilité](https://ee2023.netlify.app/modules/spa2_dis), nous voudrions montrer lors de l'école d'été Afromap'R 2025 quelques exemples d'utilisation de la base de données OSRM et du package R correspondant pour effectuer des calculs de distance routière ou de distance-temps.

Les mesures de distance sont intéressantes en elle-même pour comparer les régions les plus accessibles ou les moins accessibles d'un territoire. Mais elles sont également utiles comme variables explicatives d'autres phénomènes de nature sociale ou économique. On peut par exemple mettre en rapport la distance à une capitale nationale ou un chef-lieu de région avec le niveau de développement d'une commune. 


## (1) LE PROJET OSRM

Le **projet OSRM** (Open SOurce Routing Machine) est un service de routage utilisant les données d’OpenStreetMap (OSM). Le package permet de calculer des routes, des matrices de distances, des isochrones en utilisant s’appuyant sur le réseau routier d’OSM. Il est accessible en ligne sur le site web suivant

https://project-osrm.org/

Le **package R OSRM** est une interface créée par  Timothée Giraud, Robin Cura, Matthieu Viry et Robin Lovelace qui permet d'accéder à l'API OSRM depuis un programme R et ainsi d'effectuer automatiquement les calculs précédents. Il est accessible sur le CRAN et possède une documentation avec des exemples : 

https://cran.r-project.org/web/packages/osrm/index.html


La dernière version d'OSRM a fait l'objet de révisions importantes par Timothée Giraud et qui a publié récemment un article à ce sujet  dans  *JOSS* qui est la revue de référence pour les package R. 

- **Giraud, Timothée. 2022.** “osrm: Interface Between R and the OpenStreetMap-Based Routing Service OSRM.” *Journal of Open Source Software* 7 (78): 4574. https://doi.org/10.21105/joss.04574.

L'objectif de l'exercice proposé lors de l'école d'été CIST2023 était d'essayer d'appliquer ce package ORSM au calcul des distances entre les chefs-lieux des 14 districts de Côte d'Ivoire, afin de vérifier si les résultats obtenus sont approximativement justes et ne comportent pas trop d'erreur. Il est en effet possible que l'analyse souffre de problèmes lorsque la couverture OSM n'est pas complète ou de qualité insuffisante.

## (2) PREPARATION DES DONNEES

### Données géométriques

Nous utiliserons trois fonds de cartes de type shapefile (enregistrés au format sf de R dans des fichiers de type .RDS) qui servent uniquement ici à repérer les positions des points ou à cartographier les résultats des analyses. Il s'agit :

- du contour des 14 districts (source :  OCHA)
- du contour des 33 régions (source : OCHA)
- des routes principales (source : OSM & OCHA)

Après chargement, on projette les fonds en [EPSG 2043](http://50.57.85.98/crs_2043/Abidjan-1987-UTM-zone-29N.html) pour avoir des coordonnées en kilomètres adaptées à la Côte d'Ivoire.  

```{r}
# Contour du pays
map_state<-readRDS(file ="data/exo_access/CIV.RDS")
map_state_proj<-st_transform(map_state, crs = 2043)

# Districts
map_districts<-readRDS(file = "data/exo_access/CIV_DISTRICTS.RDS")
map_districts_proj<-st_transform(map_districts, crs = 2043)

# Regions
map_regions<-readRDS(file = "data/exo_access/CIV_REGIONS.RDS")
map_regions_proj<-st_transform(map_regions, crs = 2043)

# Routes (sélection des niveaux 1 et 2)
map_roads<-readRDS(file = "data/exo_access/CIV_ROADS.RDS") %>% filter(highway !="tertiary")
map_roads$niveau <-as.factor(map_roads$highway)
levels(map_roads$niveau)<-c("Autoroute","niveau 1", "niveau 2", "niveau 1")
map_roads$size<-4-as.numeric(map_roads$niveau)
map_roads<-map_roads %>% arrange(size)
map_roads_proj<-st_transform(map_roads, crs = 2043)


```

On peut en proposer une visualisation statique à l'aide du package mapsf :

```{r}

mf_theme(x = "agolalight")
mf_map(map_regions_proj,col="gray90",border="gray50",lwd=0.5)

mf_map(map_districts_proj,
       col=NA,
       border="black",
       lwd=2,add=T)

mf_map(map_roads_proj,
       type = "typo",
       var = "niveau",
       lwd= map_roads_proj$size,
       pal=c("red","orange","yellow"),
       add=T,
       leg_title = "Niveau des routes")

mf_label(map_districts_proj,
         var = "DIS_NOM",
         col = "blue",cex = 0.5)

mf_layout(title = "Le réseau routier de Côte d'Ivoire (source : OSM)",
          credits = "Grasland C. & Vakaramoko B., EE CIST 2023",
          frame = T,scale = T, arrow = T)
            

```

### Position des centroïdes des districts 

Le calcul du centroïde des régions ou des districts est possible dans R avec la fonction `st_centroid()` du package **sf**. Il conduit à placer des points à un emplacement différent de celui des chef-lieux administratifs puisque ces derniers ne sont pas forcément situé au centre géométrique de leur unité administrative. Du coup les points correspondant aux centroïdes risquent d'être situés à l'écart du réseau routier ce qui va conduire à des erreurs de calcul lorsqu'on voudra estimer les distances. Par exemple, le centroïde du district de Woroba ne se situe pas sur une route principale ou même secondaire.Quand au centroïde du district de la vallée du Bandama, il est bien sur une route mais très au nord du chef-lieu de Bouaké qui est un véritable carrefour routier vers l'ensemble du pays. 

```{r}
map_districts_ctr <- st_centroid(map_districts,of_largest_polygon = T, quiet=T)
map_districts_ctr_proj <- st_transform(map_districts_ctr, crs = 2043)

mf_theme(x = "agolalight")

mf_map(map_districts_proj,
       col="gray90",
       border="gray50",
       lwd=2)

mf_map(map_roads_proj,
       var = "niveau",
       lwd= map_roads_proj$size,
       col="yellow",
       add=T)

mf_map(map_districts_ctr_proj,
       pch= 20,
       col="red",
       border="yellow",
       lwd=1,
       cex = 1.3,
       add=T)

mf_label(map_districts_ctr_proj,
         var = "DIS_NOM",
         col = "black",cex = 0.5,overlap = F)


mf_layout(title = "Position des centroïdes des districts de Côte d'Ivoire",
          credits ="Grasland C. & Vakaramoko B., EE CIST 2023",
          frame = T,scale = T, arrow = T)

```

### Importation ou saisie des coordonnées des chefs-lieux de district

Pour obtenir des distances plus pertinentes, nous devons donc importer les coordonnées de longitude et de latitude des chef-lieux de districts entre lesquelles on souhaite mesurer des distances routières. Nous disposons pour cela de deux solutions :

- *Utiliser Google Maps ou Open Street Map* pour repérer un point central dans les villes et en extraire les coordonnées. On choisira de préférence un point situé sur une route principale ou mieux encore un carrefour routier du centre-ville. Ainsi à Abidjan, on peut choisir le point situé Boulevard de la République face au palais présidentiel dont les coordonnées sont 5.3274 de latitude Nord et -4.0204 de longitude. Il est essentiel de disposer de coordonnées non projetées (EPSG 4326) pour pouvoir ensuite effectuer les calculs de distance.


- *Utiliser la base Africapolis* qui fournit pour chaque agglomération les coordonnées de latitude et longitude du centroïde de la zone bâtie correspondant à l'extension spatiale de la ville. On ne va pas nécessairement sur un bâtiment remarquable, mais comme on se trouve à l'intérieur de la ville, il y a peu de chances de tomber dans une zone éloignée d'une route et l'erreur de calcul sera faible, surtout dans le cas des petites villes. Cette solution donne de bons résultats dans le cas de la Côte d'Ivoir où nous avons juste été obligé de corriger le point central retenu pour Abidjan.

```{r}
coo <-read.table(file = "data/exo_access/DIS_CHEF.csv", header=T, sep=";", dec=",") 
kable(coo,caption = "Coordonnées des chefs lieux de districts de Côte d'Ivoire")
```

A la différence des centroïdes,les chefs lieux de régions se superposent parfaitement sur le réseau routier dont ils constituent logiquement les principaux carrefours : 

```{r}
map_districts_chef <- st_as_sf(coo, coords = c("DIS_CTR_LON","DIS_CTR_LAT"))
st_crs(map_districts_chef)<-4326
map_districts_chef_proj <- st_transform(map_districts_chef, crs = 2043)


mf_theme(x = "agolalight")

mf_map(map_districts_proj,
       col="gray90",
       border="gray50",
       lwd=2)

mf_map(map_roads_proj,
       var = "niveau",
       lwd= map_roads_proj$size,
       col="yellow",
       add=T)

mf_map(map_districts_chef_proj,
       pch= 20,
       col="red",
       border="yellow",
       lwd=1,
       cex = 1.3,
       add=T)

mf_label(map_districts_chef_proj,
         var = "DIS_CTR",
         col = "black",cex = 0.5, overlap = F)


mf_layout(title = "Position des villes chef-lieux des districts de Côte d'Ivoire",
          credits = "Grasland C. & Vakaramoko B., EE CIST 2023",
          frame = T,scale = T, arrow = T)

```


### Sauvegarde des fichiers

Nous sauvegardons les nouveaux fichiers créés au cours de cette étape sous deux formes différentes : en coordonnées latitude longitude (EPSG 4326) et en coordonnées projetées (EPSG 2043).

```{r, eval=F}
saveRDS(map_districts_ctr,"data/exo_access/CIV_DISTRICTS_CTR_4326.RDS")
saveRDS(map_districts_ctr_proj,"CIV/CIV_DISTRICTS_CTR_2043.RDS")

saveRDS(map_districts_chef,"data/exo_access/CIV_DISTRICTS_CHEF_4326.RDS")
saveRDS(map_districts_chef_proj,"data/exo_access/CIV_DISTRICTS_CHEF_2043.RDS")

saveRDS(map_roads,"data/exo_access/CIV_ROADS_4326.RDS")
saveRDS(map_roads_proj,"data/exo_access/CIV_ROADS_2043.RDS")
```


## (3) CALCUL DE MATRICES DE DISTANCE



### Calcul des distances à vol d'oiseau

Le calcul des distances à vol d'oiseau (à la surface de la Terre) s'effectue très facilement à l'aide de la fonction `st_distance()` du package sf. Il faut juste faire attention à bientransformer le tableau obtenu en matrice avec la fonction `class()` puis à rajouter les noms de lignes et de colonnes. 

```{r}
dist_eu<-as.matrix(st_distance(map_districts_chef))/1000
class(dist_eu)<-"matrix"
row.names(dist_eu)<-map_districts$DIS_CTR
colnames(dist_eu)<-substr(map_districts$DIS_CTR,1,3)
kable(dist_eu, digits=0, caption="Distance à vol d'oiseau entre chefs-lieux de districts de Côte d'Ivoire")

```




### Calcul de matrices de distance et temps routier avec `osrmTable()`

La fonction demande les coordonnées de latitue et longitude des lieux pour lesquels on veut calculer les distances routières. On peut les fournir via un tableau (data.frame) ou via un objet de type spatial feature (sf) à condition que ce dernier soit en projection ESPG 4326 (c'est-à-dire non projeté).  Voyons ici le premier cas à titre d'exemple : 


On prépare un data.frame ne contenant que les coordonnées de longitude (en première colonne) et latitude (en deuxième colonne). Le nom des colonnes n'a pas d'importance mais il faut qu'il y en ait exactement deux et que la première corresponde bien aux longitudes et la seconde aux latitudes (en degrés décimaux). Il est en revanche important d'ajouter des noms de lignes au tableau pour pouvoir les retouver sur les marges de la matrice de distance. 

```{r}

dis_chef<-read.table("data/exo_access/DIS_CHEF.csv", header=T, sep=";", dec=",")
coo<-dis_chef[,4:5]
row.names(coo)<-dis_chef$DIS_CTR
kable(coo,caption = "Fichier de coordonnées pour osrm (type data.frame ou matrix)")
```

On peut alors effectuer le calcul de la matrice de distance routière soit en temps ("duration"), soit en kilomètre ("distance") soit les deux à la fois (solution la plus simple). On récupère une liste qui comporte les deux matrices de distance ainsi que les coordonnées d'origine et de destination des lieux entr lesquels on a calculé les distances. Les temps routiers sont en minutes et les distances routières en mètres.


```{r}
dist <- osrmTable(coo, measure = c("duration", "distance"))
```

On procède ensuite à l'extraction des résultats sous la forme de matrices que l'on peut exprimer dans une autre unité de mesure (par exemple convertir les mètres en kilomètres). On en profite pour les symétriser car il peut arriver que la distance soit légèrement plus grande dans une des deux directions

```{r, echo=TRUE}
dist_km <- as.matrix(dist$distances)/1000
dist_km<-(dist_km+t(dist_km))/2
kable(dist_km, 
      caption="Distance routière entre chefs-lieux de districts de Côte d'Ivoire (en km)", 
      digits=0,
      col.names = substr(colnames(dist_km),1,3))

dist_mn <- as.matrix(dist$durations)
dist_mn<-(dist_mn+t(dist_mn))/2
kable(dist_mn, 
      caption="Temps routier entre chefs-lieux de districts de Côte d'Ivoire (en minutes)", 
      digits=0,
      col.names = substr(colnames(dist_km),1,3))
```

### Indices d'accessibilité


On peut résumer chacune de nos trois matrices à l'aide d'indices d'accessibilité. 

#### Accessibilité moyenne

```{r, echo=TRUE}
dist_eu_mean <- apply(dist_eu,1,mean)
dist_km_mean <- apply(dist_km, 1,mean)
dist_mn_mean <- apply(dist_mn, 1,mean)
tab<-data.frame(dist_eu_mean, dist_km_mean,dist_mn_mean)
kable(tab, 
      caption = "Accessibilité moyenne des chefs-lieux de Côte d'Ivoire",
      col.names = c("Km à vol d'oiseau", "Km par la route", "Temps par la route"),
      digits=0)

```

#### Accessibilité moyenne pondérée

```{r, echo=TRUE}
dist_eu_mean <- apply(dist_eu,1,mean)
dist_km_mean <- apply(dist_km, 1,mean)
dist_mn_mean <- apply(dist_mn, 1,mean)
tab<-data.frame(dist_eu_mean, dist_km_mean,dist_mn_mean)
kable(tab, 
      caption = "Accessibilité moyenne des chefs-lieux de Côte d'Ivoire",
      col.names = c("Km à vol d'oiseau", "Km par la route", "Temps par la route"),
      digits=0)

```



Les matrices (quand elles ne sont pas trop grandes) sont des objets assez pratiques pour effectuer des calculs dans R et offrent des possibilités différentes de celles des data.frame. On peut par exemple diviser nos deux matrices l'une par l'autre afin de calculer la vitesse moyenne de circulation entre deux chefs-lieux :


```{r, echo=TRUE}
dist_ho <- dist_mn / 60
dist_km_ho <-dist_km / dist_ho
diag(dist_km_ho)<-NA
kable(dist_km_ho, 
      caption = "Vitesse de circulation routière entre chefs-lieux de Côte d'Ivoire (en km/h)", 
      digits = 0,
      col.names = substr(colnames(dist_km_ho),1,3))
```

On peut également effectuer des calculs rapides sur les lignes ou les colonnes de la matrice et ainsi produire les mesures d'accessibilité vues en cours. On se sert par exemple pour cela de la fonction *apply()* de R-base.



```{r, echo=TRUE}
dist_km_mean <- apply(dist_km, 1,mean)
dist_km_max <- apply(dist_km, 1,max)
dist_mn_mean <- apply(dist_mn, 1,mean)
dist_mn_max <- apply(dist_mn, 1,max)
tab<-data.frame(dist_km_mean,dist_km_max,dist_mn_mean,dist_mn_max)
tab$dist_km_ho_mean<-dist_km_mean/(dist_mn_mean/60)
kable(tab, 
      caption = "Indices d'accessibilité routière des chefs-lieux de Côte d'Ivoire",
      digits=0)

```

- **Accessiblité en km** : d'après notre tableau (colonne *dist_km_mean*) c'est Yamoussoukro qui est la ville la plus accessible avec une distance moyenne de 247 km aux chefs-lieux de Côte d'Ivoire. Odienné est la ville la moins accessible avec une distance moyenne de 508 km.
- **Accessiblité en temps** : d'après notre tableau (colonne *dist_mn_mean*) c'est toujours Yamoussoukro qui est la ville la plus accessible avec un temps moyen  de 212 minutes (soit environ 3 heures et demi) pour rejoindre les chefs-lieux de Côte d'Ivoire. Bondioukou est la ville la moins accessible avec un temps moyen de 463 minutes (soit un peu moins de huit heures).
- **Equité en km** : dans une logique d'équité (faire en sorte que le plus défavorisé soit le moins défavorisé possible), la ville la plus équitable est celle où la distance maximum est la plus faible. Il s'agit dans ce cas de Bouaké dont la distance maximale à un autre chef-lieu est de 473 km. Les localisation les moins équitables seraient Abidjan ou Odienné qui sont les deux centre les plus éloignés (794 km). 
- **Equité en temps** : dans une logique d'équité mesurée en temps, Bouaké demeure la meilleure option avec une durée de parcours maximale de 427 mn (soit environ 7 heures). Les localisations les moins équitables seraient désormais Bondoukou ou Odienné qui sont éloigénes  de 750 mn (soit près de 13 heures).
- **Vitesse** : dans une logique de vitesse de circulation (qui témoigne de la qualité des routes qui partent d'une ville), c'est Abidjan qui apparaît la mieux équipée puisque la vitesse moyenne pour rejoindre les autres villes y est de 74 km/h. La plus faible performance est pour Séguéla (61 km/h). La vitesse ne tient cependant pas compte des éventuels détours effectués par la route. 




## (4) CARTOGRAPHIE D'ISOCHRONES


### Exemple de Bouaké


On commence par repérer les coordonnées les plus exactes possibles du marché de Bouaké en se servant par exemple de Google Maps. Puis on va utiliser soit la fonction `osrmIsochrone()`, soit la fonction `osrmIsodistance()` du package **osrm**pour générer des polygones correspondant aux points situés respectivement à une même distance en temps ou une même distance en kilomètres par la route. 

```{r, eval=FALSE}
iso_time <- osrmIsochrone(loc = c(-5.02483,7.69714),
                                 breaks = c(0,30,60,90,120,150,180, 210, 240)
                                 )
iso_time$isomean=(iso_time$isomin+iso_time$isomax)/120
iso_time_proj<-st_transform(iso_time, crs=2043)


iso_dist <- osrmIsodistance(loc = c(-5.02483,7.69714),
                                 breaks = c(0,30000,60000,90000,120000,150000, 180000, 210000, 240000))
iso_dist$isomean=(iso_dist$isomin+iso_dist$isomax)/2000
iso_dist_proj<-st_transform(iso_dist, crs=2043)
```


On peut maintenant tracer deux cartes d'isolignes, l'une correspondant aux temps et l'autre aux distances :


```{r, eval=FALSE}
png("data/exo_access/bouake.png", width=1000, height=500)
par(mfrow=c(1,2))
### Distance kilométrique
mf_theme(x = "agolalight")

mf_map(map_districts_proj,
       col="gray90",
       border="gray50",
       lwd=1)


mf_map(iso_dist_proj,
       type="choro",
       var="isomean",
       nbreaks=8,
       leg_title = "distance (km)",
       leg_val_rnd = 0,
      border=NA,
       add=T)

mf_map(map_districts_proj,
       col=NA,
       border="gray50",
       lwd=1,
       add=T)

mf_map(map_roads_proj,
       var = "niveau",
       lwd= map_roads_proj$size,
       col="yellow",
       add=T)

mf_map(map_districts_chef_proj,
       pch= 20,
       col="red",
       border="yellow",
       lwd=1,
       cex = 1.3,
       add=T)

mf_label(map_districts_chef_proj,
         var = "DIS_CTR",
         col = "black",cex = 0.5, overlap = F)


mf_layout(title = "Distance kilométrique ",
          credits = "Grasland C. & Vakaramoko B., EE CIST 2023",
          frame = T,scale = T, arrow = F)
            


#### Distance temps
mf_theme(x = "agolalight")

mf_map(map_districts_proj,
       col="gray90",
       border="gray50",
       lwd=1)


mf_map(iso_time_proj,
       type="choro",
       var="isomean",
       breaks=c(0,0.501,1.001,1.5001,2.001,2.5001,3.001,3.5001,4.001),
   #    nbreaks=8,
       leg_title = "temps (heures)",
       leg_val_rnd = 1,
      border=NA,
       add=T)

mf_map(map_districts_proj,
       col=NA,
       border="gray50",
       lwd=1,
       add=T)

mf_map(map_roads_proj,
       var = "niveau",
       lwd= map_roads_proj$size,
       col="yellow",
       add=T)

mf_map(map_districts_chef_proj,
       pch= 20,
       col="red",
       border="yellow",
       lwd=1,
       cex = 1.3,
       add=T)

mf_label(map_districts_chef_proj,
         var = "DIS_CTR",
         col = "black",cex = 0.5, overlap = F)


mf_layout(title = "Distance temps ",
          credits = "Grasland C. & Vakaramoko B., EE CIST 2023",
          frame = T,scale = T, arrow = F)
            
dev.off()
```


![](data/exo_access/bouake.png){width=800}



- **Commentaire** : La zone accessible en mois de 240 km recouvre l'essentiel de la partie centrale du pays et affiche une forme globalement circulaire en raison de la situation de carrefour de Bouaké. Mais la zone accessible en mois de 4 h est davantage allongé dans le sens Nord-Sud en raison de la présence d'autoroutes ou de voies rapides sur l'axe Abidjan-Yamoussoukro-Korhogo. Evidemment ces calculs théoriques ne tiennent pas compte des barrages et des "corps habillés" ... 


### Exemple d'Abidjan

A titre de comparaison, on refait le même exercice pour Abidjan en prenant comme point de départ le Plateau.


```{r, eval=FALSE}
iso_time <- osrmIsochrone(loc = c(-4.02044,5.32374),
                                 breaks = c(0,30,60,90,120,150,180, 210, 240)
                                 )
iso_time$isomean=(iso_time$isomin+iso_time$isomax)/120
iso_time_proj<-st_transform(iso_time, crs=2043)


iso_dist <- osrmIsodistance(loc = c(-4.02044,5.32374),
                                 breaks = c(0,30000,60000,90000,120000,150000, 180000, 210000, 240000))
iso_dist$isomean=(iso_dist$isomin+iso_dist$isomax)/2000
iso_dist_proj<-st_transform(iso_dist, crs=2043)


png("data/exo_access/abidjan.png", width=1000, height=500)
par(mfrow=c(1,2))
### Distance kilométrique
mf_theme(x = "agolalight")

mf_map(map_districts_proj,
       col="gray90",
       border="gray50",
       lwd=1)


mf_map(iso_dist_proj,
       type="choro",
       var="isomean",
       nbreaks=8,
       leg_title = "distance (km)",
       leg_val_rnd = 0,
      border=NA,
       add=T)

mf_map(map_districts_proj,
       col=NA,
       border="gray50",
       lwd=1,
       add=T)

mf_map(map_roads_proj,
       var = "niveau",
       lwd= map_roads_proj$size,
       col="yellow",
       add=T)

mf_map(map_districts_chef_proj,
       pch= 20,
       col="red",
       border="yellow",
       lwd=1,
       cex = 1.3,
       add=T)

mf_label(map_districts_chef_proj,
         var = "DIS_CTR",
         col = "black",cex = 0.5, overlap = F)


mf_layout(title = "Distance kilométrique ",
          credits = "Grasland C. & Vakaramoko B., EE CIST 2023",
          frame = T,scale = T, arrow = F)
            


#### Distance temps
mf_theme(x = "agolalight")

mf_map(map_districts_proj,
       col="gray90",
       border="gray50",
       lwd=1)


mf_map(iso_time_proj,
       type="choro",
       var="isomean",
       breaks=c(0,0.501,1.001,1.5001,2.001,2.5001,3.001,3.5001,4.001),
   #    nbreaks=8,
       leg_title = "temps (heures)",
       leg_val_rnd = 1,
      border=NA,
       add=T)

mf_map(map_districts_proj,
       col=NA,
       border="gray50",
       lwd=1,
       add=T)

mf_map(map_roads_proj,
       var = "niveau",
       lwd= map_roads_proj$size,
       col="yellow",
       add=T)

mf_map(map_districts_chef_proj,
       pch= 20,
       col="red",
       border="yellow",
       lwd=1,
       cex = 1.3,
       add=T)

mf_label(map_districts_chef_proj,
         var = "DIS_CTR",
         col = "black",cex = 0.5, overlap = F)


mf_layout(title = "Distance temps ",
          credits = "Grasland C. & Vakaramoko B., EE CIST 2023",
          frame = T,scale = T, arrow = F)
            
dev.off()          

```


![](data/exo_access/abidjan.png){width=800}


- **Commentaire** : La zone accessible en moins de 240 km se limite au quart sud-ouest du pays et permet d'atteindre Yamoussoukro mais pas Bouaké. Par contre, si on raisonne en distance-temps, la zone accessible en moins de 4h s'élargit fortement en direction du Nord pour atteindre Bouaké grâce à l'autoroute. 


### Exemple d'Odienné

On prend maintenant le cas d'Odienné qui est l'une des villes les plus périphériques et les moins bien relié au reste du pays. 


```{r, eval=FALSE}
iso_time <- osrmIsochrone(loc = c(-7.56400,9.50300),
                                 breaks = c(0,30,60,90,120,150,180, 210, 240)
                                 )
iso_time$isomean=(iso_time$isomin+iso_time$isomax)/120
iso_time_proj<-st_transform(iso_time, crs=2043)


iso_dist <- osrmIsodistance(loc = c(-7.56400,9.50300),
                                 breaks = c(0,30000,60000,90000,120000,150000, 180000, 210000, 240000))
iso_dist$isomean=(iso_dist$isomin+iso_dist$isomax)/2000
iso_dist_proj<-st_transform(iso_dist, crs=2043)


png("data/exo_access/odienne.png", width=1000, height=500)
par(mfrow=c(1,2))
### Distance kilométrique
mf_theme(x = "agolalight")

mf_map(map_districts_proj,
       col="gray90",
       border="gray50",
       lwd=1)


mf_map(iso_dist_proj,
       type="choro",
       var="isomean",
       nbreaks=8,
       leg_title = "distance (km)",
       leg_val_rnd = 0,
      border=NA,
       add=T)

mf_map(map_districts_proj,
       col=NA,
       border="gray50",
       lwd=1,
       add=T)

mf_map(map_roads_proj,
       var = "niveau",
       lwd= map_roads_proj$size,
       col="yellow",
       add=T)

mf_map(map_districts_chef_proj,
       pch= 20,
       col="red",
       border="yellow",
       lwd=1,
       cex = 1.3,
       add=T)

mf_label(map_districts_chef_proj,
         var = "DIS_CTR",
         col = "black",cex = 0.5, overlap = F)


mf_layout(title = "Distance kilométrique ",
          credits = "Grasland C. & Vakaramoko B., EE CIST 2023",
          frame = T,scale = T, arrow = F)
            


#### Distance temps
mf_theme(x = "agolalight")

mf_map(map_districts_proj,
       col="gray90",
       border="gray50",
       lwd=1)


mf_map(iso_time_proj,
       type="choro",
       var="isomean",
       breaks=c(0,0.501,1.001,1.5001,2.001,2.5001,3.001,3.5001,4.001),
   #    nbreaks=8,
       leg_title = "temps (heures)",
       leg_val_rnd = 1,
      border=NA,
       add=T)

mf_map(map_districts_proj,
       col=NA,
       border="gray50",
       lwd=1,
       add=T)

mf_map(map_roads_proj,
       var = "niveau",
       lwd= map_roads_proj$size,
       col="yellow",
       add=T)

mf_map(map_districts_chef_proj,
       pch= 20,
       col="red",
       border="yellow",
       lwd=1,
       cex = 1.3,
       add=T)

mf_label(map_districts_chef_proj,
         var = "DIS_CTR",
         col = "black",cex = 0.5, overlap = F)


mf_layout(title = "Distance temps ",
          credits = "Grasland C. & Vakaramoko B., EE CIST 2023",
          frame = T,scale = T, arrow = F)
            
dev.off()            

```


![](data/exo_access/odienne.png){width=800}

- **Commentaire** : la zone accessible en 240 km ou 4h est assez réduite à l'intérieur de la Côte d'Ivoire. Toutefois, le calcul effectué par OSRM ne se limite pas aux frontières du pays et indique une accessibilité possibles de territoires voisins situés en Guinée ou au Mali.

## CONCLUSION

L'exercice a montré que les calculs de distances routières effectuées à l'aide d'Open Street Map fournissent d'**assez bonnes approximations des distances kilométriques et des distances temps**. Les calculs sont certes moins précis que ceux que l'on peut effectuer en temps réel à l'aide de fournisseurs privés tels que Google Map. Mais ils fournissent des résultats libres de droits à partir d'une base de donnée mise à jour régulièrement par les citoyens du pays. 