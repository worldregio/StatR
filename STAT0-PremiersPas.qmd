---
title: "Premiers pas"
subtitle: "AfromapR Bouaké 2025"
author: "Claude Grasland & Jean-Paul Nguessi"
date: "2025-05-27"
date-format: iso
lang: fr
format:
  html:
    embed-resources: true
    smooth-scroll: true
    fontsize: 0.9em
    toc: true
    toc-depth: 3
    toc-title: "."
    bibliography: [references.bib]
    crossrefs-hover: false
    css: custom.css
    theme: [yeti, style.scss]
execute:
  warning: false
  message: false 
knitr:
  opts_chunk:
    out.width: "100%"
editor_options: 
  chunk_output_type: console
editor: 
  markdown: 
    wrap: 72
---



- **Mise en place** : Créer un dossier sur votre ordinateur puis ouvrir un projet R dans ce dossier et crée un programme R.



# OPERATIONS

Nous allons commencer par passer quelques commandes arithmétiques simples. Il suffit de les taper dans la console de R pour qu'elles s'executent automatiquement. 

## Opérations de base

```{r func1}
8+2

8-2

8*2

8/2

```


## Fonctions mathématiques

```{r func2}
## Puissance
8**2

## Racine carrée
sqrt(8)
8**(1/2)

## Logarithme népérien
log(10)

# Logarithme décimal
log10(10)

```



## Fonctions géométriques

```{r func3}
## Le nombre pi
pi

## Sinus 
sin(pi)

## Cosinus
cos(pi)

## Tangente
tan(pi)
```



# OBJETS

Les objets élémentaires de R apparaissent dans la fenêtre environnement sous la rubrique `Values` une fois qu'ils sont créés. Ils sont stockés dans la mémoire de votre ordinateur mais effacé si celui-ci est éteint

## Eléments

Un élément est unique et constitue la brique de base de tous les objets suivants. On peut aussi l'interpréter comme un vecteur de longueur 1 ou une matrice de dimension 1x1. 

```{r elem numeric}
x<-8
y<-2

x+y
x*y
x**y

```

Les éléments se combinent différemment selon leur type. Par exemple, des éléments de type caractère (*character*) peuvent être assemblés avec l'instruction `paste()` ou découpez avec l'instruction `substr()` :

```{r elem charact}
x<-"Bonjour"
y<- "tout le monde"
z<- "!"
paste(x,y,z)
substr(x,1,3)
```

Quant aux éléments logiques (*logical*) nous verrons qu'ils peuvent se combiner avec des opérateurs comme `&`  qui signifie *ET* ou bien `|` qui signifie *OU*.

```{r elem logic}
x<-TRUE
y<-FALSE

x & y
x | y 
```


## vecteurs (*vectors*)

Un vecteur est un ensemble d'éléments **de même type** que l'on a concaténés à l'aide de l'instruction `c()`. On peut ensuite les aditionner, les multiplier ou les combiner avec des éléments.


```{r vecteurs }
x <- c(1,2,4,8,16)
y <- 4
x+y
x*y
x**y
```

On remarque dans l'exemple ci-dessus que R n'a pas de problème pour combiner des vecteurs de tailles différentes. 


## Matrices (*matrix*)

Une matrice est un ensemble de vecteurs **de même longueur et de même  type**. On peut donc construire une matrice en concaténant des vecteurs verticalement avec `cbind()`ou horizontalement avec `rbind()`. 

```{r matrices }

# deux vecteurs
x1 <- c(1,2,4,8,16)
x2 <- c(5,10,15,20,25)

# matrice en colonnes
m1 <- cbind(x1,x2)
m1

# matrice en lignes
m2 <- rbind(x1,x2)
m2

# piège !
m3 <- c(x1,x2)
m3
is.matrix(m3)
```



::: {.callout-important}
Si on assemble deux vecteurs à l'aide de la commande `c()`on obtient un vecteur et pas une matrice.
:::

## Listes (*list*)

R utilise des types plus complexes d'objets qui lui sont propres et qui sont en général des listes ou des listes de listes.

- liste simple
- liste de liste
- listes de vecteur = data.frame
- ...


::: {.callout-important}
Les `vecteurs` regroupent des `éléments de même type` tandis que les `listes` regroupent des `éléments ou des objets de type quelconque`. Le type liste est donc beaucoup plus général, mais aussi plus difficile d'emploi. 

On peut comparer une liste à un *panier de course* dans lequel on mélange des choux, des carottes, des navets, une boîte de douze oeufs, un paquet de croquettes pour chiens, etc...
:::




```{r listvec}
# Format vecteur
prenom <- c("Ali", "Amine",
    "Anne","Marc","Zayneb")
sexe <- c("H","H","F","H","F")
age  <- c(21,22,24,18,25)


# Format liste
Ali <- list("H",21)
Amine <- list("F",22)
Anne <- list("F",28)
Marc <- list ("H",18)
Zayneb <- list("F",25)

# Ne pas confondre !
Ali <- c("H",21)
Ali
Ali <- list("H",21)
Ali
```



# TYPES

Chaque valeur, vecteur ou matrice appartient à un seul type de données. Il est important de ne pas les confondre, sous peine d'obtenir des résultats ... douteux. On se limitera ici aux principaux types, d'autres étant vus ultérieurement dans l'année :

- *numeric* : type général (entier, réels, ...)
- *logique* : type booleen (TRUE/FALSE)
- *date* : année, mois, jour,n heure, minutes, secondes, ...
- *character* : texte quelconque
- *factor* : variable catégorielle (codage d'enquêtes ...)

La commande `str()` permet de vérifier le type d'un vecteur (ou d'une matrice) et d'en afficher la dimension. 

```{r typevar}
# Format charactère
prenom <- c("Ali", "Amine","Anne",
            "Marc","Zayneb")
str(prenom)

# Format logique
likeR <- c(TRUE,FALSE, TRUE,
           FALSE, FALSE)
str(likeR)
# Format Factor
sexe <- c(1,1,2,1,2)
sexe<-as.factor(sexe)
levels(sexe) <-c("Homme","Femme")
str(sexe)

# Format numerique
age  <- c(21,22,24,18,25)
str(age)

# Format date
nais<-c("1999-10-28","1998-10-13",
 "1996-10-15","2002-02-07","1995-06-18")
nais<-as.Date(nais)
str(nais)
```




# En résumé

::: {.callout-note}
R est un langage de programmation multifonction qui évolue depuis maintenant plus de 30 ans et auquel s'ajoutent continuellement de nouveaux packages. A la différence de SPSS, il n'est pas spécialisé uniquement en statistique, même si le coeur du logiciel est bien centré sur la statistique. Pour progresser rapidement en R il est indispensable :

- de prêter une grande attention aux types de `variables et de tableaux.`
- de ne pas chercher à utiliser trop vite de nouveaux packages tant que l'on n'a pas acquis une pratique suffisante du `R-Base`. 
- de consulter la `documentation` et les `forums de discussion` en cas de difficulté.
:::


## Exercices


**Exercice 1**

Construire le vecteur `x` suivant :

```{r echo=FALSE}
x <- c("Paris", "Londres","Tokyo","New York")
x
```


::: {.callout-tip title="Solution ?" collapse=true}
```{r echo=TRUE}
x <- c("Paris", "Londres","Tokyo","New York")
x
```
:::



Construire le vecteur y suivant :

```{r echo=FALSE}
y <- c("France", "Royaume-Uni","Japon","USA")
y
```


::: {.callout-tip title="Solution ?" collapse=true}
```{r echo=TRUE}
y <- c("France", "Royaume-Uni","Japon","USA")
y
```
:::

Construire le vecteur z suivant :

```{r echo=FALSE}
z <- c(10.2, 14.6,42.8,23.9)
z
```


::: {.callout-tip title="Solution ?" collapse=true}
```{r echo=TRUE}
z <- c(10.2, 14.6,42.8,23.9)
z
```
:::



Construire la matrice `m1` 

```{r echo=FALSE}
m1<-rbind(x,y)
m1
```


::: {.callout-tip title="Solution ?" collapse=true}
```{r eval=FALSE}
m1<-rbind(x,y)
m1
```
:::


Construire la matrice `m2` 

```{r echo=FALSE}
m2<-cbind(x,y)
m2
```


::: {.callout-tip title="Solution ?" collapse=true}
```{r eval=FALSE}
m2<-cbind(x,y)
m2
```
:::




Construire le data.frame `df` 

```{r echo=FALSE}
df<-data.frame(y,x,z)
df
```


::: {.callout-tip title="Solution ?" collapse=true}
```{r eval=FALSE}
df<-data.frame(y,x,z)
```
:::




**Exercice 2 (d'après J.Barnier)**

On a demandé à 4 ménages le revenu des deux conjoints, et le nombre de personnes du ménage :

```{r}
conjoint1 <- c(1200, 1180, 1750, 2100)
conjoint2 <- c(1450, 1870, 1690, 0)
nb_personnes <- c(4, 2, 3, 2)
```

Calculer le revenu total de chaque ménage, puis diviser par le nombre de personnes pour obtenir le revenu par personne de chaque ménage.


::: {.callout-tip title="Solution ?" collapse=true}
```{r}
revenu_total <- conjoint1 + conjoint2
revenu_total / nb_personnes
```
:::






